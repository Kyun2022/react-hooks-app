
## PROJECT OVERVIEW
This project is a Next.js application.  Further details to be added.

## CODE STYLE
Adhere to standard JavaScript/TypeScript conventions.  Use Prettier for code formatting.  Tailwind CSS class order should follow the order: margin, positioning, display, box-sizing, flexbox, grid, etc., then others.  Utilize Tailwind CSS Class Sorter and/or Tailwind CSS IntelliSense VSCode extensions to assist with maintaining correct class order.

## FOLDER ORGANIZATION
The project follows a standard Next.js folder structure. See `<project-structure>` for details.

## TECH STACK
- Next.js
- TypeScript
- Tailwind CSS
- [Add other technologies used]
- VSCode Extensions: Tailwind CSS Class Sorter, Tailwind CSS IntelliSense

## PROJECT-SPECIFIC STANDARDS
- Maintain consistent naming conventions.
- Write clear and concise code.
- Follow Tailwind CSS class order guidelines (see CODE STYLE section).

## WORKFLOW & RELEASE RULES
- Use Git for version control.
- Commit messages should be clear and concise.
- Follow standard branching strategies (e.g., Gitflow).
- Further details to be added.

## REFERENCE EXAMPLES
- Add relevant code examples here.

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- This `.cursorrules` file serves as the primary documentation.
- Add links to external documentation as needed.

## DEBUGGING
- Utilize browser developer tools.
- Use console.log for debugging purposes.

## FINAL DOs AND DON'Ts
- **DO:** Follow the coding style guidelines.
- **DO:** Write comprehensive commit messages.
- **DO:** Use the recommended VSCode extensions.
- **DON'T:** Commit code with formatting errors.
- **DON'T:** Ignore Tailwind CSS class order warnings.