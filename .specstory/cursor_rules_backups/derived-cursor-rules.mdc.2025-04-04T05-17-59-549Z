
## PROJECT OVERVIEW
This project is a Next.js application.  It includes a collection of practice applications accessible from the main page. The main landing page is located at `pages/index.tsx`. All practice applications are now linked from the main page.  The landing page has been redesigned for improved aesthetics and user experience. The main landing page (`pages/index.tsx`) now includes links to all practice applications in the `/pages` directory, with improved styling and iconography.  The `/pages/practice` directory has been removed.

## CODE STYLE
Adhere to standard JavaScript/TypeScript conventions.  Use Prettier for code formatting.  Tailwind CSS class order should follow the order: margin, padding (mt, mx, etc.), then layout (flex, justify-center, etc.), then others.  Utilize Tailwind CSS Class Sorter and/or Tailwind CSS IntelliSense VSCode extensions to assist with maintaining correct class order.  To automatically sort classes, install `prettier` and `prettier-plugin-tailwindcss` (`npm install -D prettier prettier-plugin-tailwindcss`), add `"plugins": ["prettier-plugin-tailwindcss"]` to your `.prettierrc` file, and enable "Format On Save" in VSCode settings. Alternatively, run `npm run format` or `npx prettier --write .` to manually format. The `react-icons` package has been added to the project. The `next/image` component should be used for optimized image loading.  Avoid using custom class names in Tailwind CSS; use existing classes to ensure consistency and maintainability.  Use only standard Tailwind CSS classes. Avoid custom class names.  Use `font-mono` only when necessary and justified.

## FOLDER ORGANIZATION
The project follows a standard Next.js folder structure. See `<project-structure>` for details. An `index.tsx` file has been added to the `pages` directory to serve as the main landing page. The `pages/practice` directory was added and populated with individual practice application components. The `pages/practice` directory has been removed, with all practice applications now directly under `/pages`.

## TECH STACK
- Next.js
- TypeScript
- Tailwind CSS
- Prettier
- prettier-plugin-tailwindcss
- react-icons
- VSCode Extensions: Tailwind CSS Class Sorter, Tailwind CSS IntelliSense

## PROJECT-SPECIFIC STANDARDS
- Maintain consistent naming conventions.  All filenames should be lowercase.  All application pages should include a return button using the Next.js Link component and react-icons.
- Write clear and concise code.
- Follow Tailwind CSS class order guidelines (see CODE STYLE section).
- Correct TypeScript type definitions to avoid errors like "Unsafe argument of type `any` assigned to a parameter of type `SetStateAction<Signal>`".  Ensure proper type definitions for state variables and function parameters, especially when using `useState` and `keyof` type operators.  Refer to the updated examples in the REFERENCE EXAMPLES section for correcting type definitions related to `useState` and `keyof`.
- Address potential memory leaks by clearing intervals using `clearInterval` within `useEffect` cleanup functions.  See example in REFERENCE EXAMPLES.
- When using images in your application, ensure you use the correct HTML tag (`<img>`) for standard image display. Using `<image>` within HTML will cause TypeScript errors.  Use `<img src={...} alt={...}>` for standard images and handle SVGs appropriately, avoiding the `<image>` tag. Use `next/image` component for optimized image loading.
- When handling form submissions, ensure to use `e.preventDefault()` to prevent default form submission behavior.  Use `async/await` for proper handling of asynchronous functions within form submission handlers.  Handle form submissions using `async/await` and `e.preventDefault()` to prevent default behavior and manage asynchronous operations correctly.  Handle form submission on Enter key press by using `onKeyDown` event and checking for `e.key === 'Enter'`.
- When adding new tasks, ensure that required properties, such as `index`, are included to avoid TypeScript errors.  See example in REFERENCE EXAMPLES.  Ensure that the `index` property is correctly assigned when adding new tasks to avoid TypeScript errors.
- Ensure components are correctly exported and imported to avoid undefined component type errors.
- Add return buttons to all practice application pages using Next.js Link component and react-icons.  See example in REFERENCE EXAMPLES.  All practice application pages should include a return button using the Next.js Link component and react-icons. All application pages should include a return button using the Next.js Link component and react-icons. Use only standard Tailwind CSS classes. Avoid custom class names.


## WORKFLOW & RELEASE RULES
- Use Git for version control.
- Commit messages should be clear and concise.
- Follow standard branching strategies (e.g., Gitflow).
- Add clear descriptions of bug fixes in commit messages.  Include relevant context and steps to reproduce the issue.
- Further details to be added.

## REFERENCE EXAMPLES
- Add relevant code examples here.  Example of corrected Tailwind class order: `<div className="mt-4 flex justify-center">` instead of `<div className="flex justify-center mt-4">`
- Example of corrected TypeScript type definition (from 2025-04-02 interaction):
```typescript
  import { useEffect, useState } from "react";

  type Signal = keyof typeof CYCLE;

  type UseSignal = {
    signal: Signal;
  };
```
- Example of corrected `useEffect` hook for handling intervals and preventing memory leaks (from 2025-04-01 interaction):
```typescript
useEffect(() => {
  let interval: NodeJS.Timeout;
  if (isRunning) {
    interval = setInterval(() => {
      setSeconds(prevState => prevState + 1);
    }, 1000);
  }
  return () => {
    clearInterval(interval);
  };
}, [isRunning]);
```
- Example of correcting image tag usage (from 2025-04-03 interaction):  Use `<img src={...} alt={...}>` instead of `<image src={...} alt={...}>`
- Example of correct form submission handling (from 2025-04-03 interaction):
```typescript
<form onSubmit={async (e) => {
  e.preventDefault();
  await handleSearchPokemon();
}}>
  {/* Form elements */}
</form>
```
- Example of handling form submission on Enter key press (from 2025-04-03 interaction):
```typescript
<form onSubmit={async (e) => {
  e.preventDefault();
  await handleSearchPokemon();
}}>
  <input type="text" onKeyDown={(e) => { if (e.key === 'Enter') {e.preventDefault(); handleSearchPokemon();}}}/>
</form>
```
- Example of adding a task with a required index property (from 2025-04-03 interaction):
```typescript
setTaskList((prevState) => [
  ...prevState,
  { label: taskLabel, completed: false, index: prevState.length },
]);
```
- Example of correcting button onClick handler (from 2025-04-03 interaction):
```typescript
<Button
  label="追加"
  className="mx-auto mt-4"
  variant="primary"
  onClick={handleAddTask}
/>
```
- Example of correcting toggle complete button handling (from 2025-04-03 interaction):
```typescript
onClick={() => {
  setTaskList((prevState) =>
    prevState.map((t) =>
      t.index === task.index ? { ...t, completed: !t.completed } : t
    )
  );
}}
```
- Example of handling form submission with Enter key (from 2025-04-03 interaction):
```typescript
<form onSubmit={(e) => {
  e.preventDefault();
  handleAddTask();
}}>
  <input type="text"  />
</form>
```
- Example of adding a return button using Next.js Link component and react-icons:
```jsx
<Link href="/" className="...">
  <FaHome />
  Home
</Link>
```
- Example of using next/image component:
```jsx
<Image src="/image.jpg" alt="My Image" width={500} height={300} />
```
- Example of using next/image component with fill and priority:
```jsx
<div className="relative h-48 w-48">
  <Image src={pokemon.sprites.front_default} alt={pokemon.name} fill className="object-contain" sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw" priority />
</div>
```

## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- This `.cursorrules` file serves as the primary documentation.
- Add links to external documentation as needed.
- The `pages/index.tsx` file provides a landing page with links to practice applications.  This page now includes links to all applications in the `/pages` directory.  The main landing page (`pages/index.tsx`) now includes links to all practice applications in the `/pages` directory, with improved styling and iconography.

## DEBUGGING
- Utilize browser developer tools.
- Use console.log for debugging purposes.
- When encountering TypeScript errors, carefully review type definitions for accuracy and consistency.  Pay close attention to the HTML tag used for image display; use `<img>` instead of `<image>`.  Handle SVGs appropriately, avoiding the `<image>` tag.
- Pay close attention to the lifecycle of `useEffect` hooks, particularly when dealing with intervals or timers.  Ensure proper cleanup functions are implemented to prevent memory leaks.
- When debugging form submissions, ensure `e.preventDefault()` is used correctly and asynchronous operations are handled with `async/await`.  Ensure that form submissions also handle the Enter key press correctly using `onKeyDown` event and checking for `e.key === 'Enter'`.
- When debugging TypeScript errors related to missing properties in objects, ensure all required properties are included when creating new objects.  Ensure that event handlers, such as `onClick`, are correctly assigned to buttons and other interactive elements.  Address errors related to undefined component types by ensuring components are correctly exported and imported.
- Check for undefined component types by ensuring correct export and import of components.


## FINAL DOs AND DON'Ts
- **DO:** Follow the coding style guidelines.
- **DO:** Write comprehensive commit messages.
- **DO:** Use the recommended VSCode extensions and automatic formatting tools.
- **DO:** Pay close attention to TypeScript type definitions to prevent runtime errors.  Ensure correct usage of `keyof` and proper type definitions for `useState` hooks.  Implement proper cleanup functions in `useEffect` hooks to prevent memory leaks. Use `<img>` tag for images, and `next/image` for optimized image loading. Handle SVGs appropriately, avoiding the `<image>` tag.
- **DO:** Use descriptive labels for buttons to clearly indicate their function (e.g., "Start" and "Stop").
- **DO:** Use `e.preventDefault()` in form submission handlers.
- **DO:** Use `async/await` for asynchronous operations in form submission handlers.  Handle form submissions using `async/await` and `e.preventDefault()` to prevent default behavior and manage asynchronous operations correctly. Handle form submission on Enter key press by using `onKeyDown` event and checking for `e.key === 'Enter'`.
- **DO:** Ensure all required properties are included when creating new objects to avoid TypeScript errors.  Ensure that event handlers are correctly assigned to interactive elements.  Ensure components are correctly exported and imported to avoid undefined component type errors.  Ensure that all necessary properties, including `index`, are included when creating new tasks. Add return buttons to all practice application pages.
- **DON'T:** Commit code with formatting errors.
- **DON'T:** Ignore Tailwind CSS class order warnings.
- **DON'T:** Ignore TypeScript type errors.
- **DON'T:** Neglect to clear intervals in `useEffect` cleanup functions.
- **DON'T:** Use the `<image>` tag for displaying images in HTML; use `<img>` instead. Handle SVGs appropriately, avoiding the `<image>` tag.
- **DON'T:** Forget to prevent default form submission behavior using `e.preventDefault()`.
- **DON'T:** Omit required properties when creating new objects.
- **DON'T:** Forget to assign `onClick` handlers to buttons and other interactive elements.
- **DON'T:** Forget to correctly export and import components to avoid undefined component type errors.
- **DON'T:** Forget to include all necessary properties, including `index`, when creating new tasks. Add return buttons to all practice application pages.  Use only standard Tailwind CSS classes. Avoid custom class names.